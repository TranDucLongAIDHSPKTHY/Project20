import streamlit as st
import pandas as pd
import pickle
from pathlib import Path
import os

# === Thi·∫øt l·∫≠p trang ===
st.set_page_config(
    page_title="H·ªá Th·ªëng ƒê·ªÅ Xu·∫•t Phim",
    page_icon="üé¨",
    layout="wide"
)

# === CSS t√πy ch·ªânh ===
st.markdown("""
<style>
    .recommendation-card {
        border: 1px solid #e0e0e0;
        border-radius: 12px;
        padding: 15px;
        margin: 10px 0;
        background-color: #ffffff;
        box-shadow: 0 2px 6px rgba(0,0,0,0.05);
        text-align: center;
    }
    .recommendation-card:hover {
        box-shadow: 0 4px 12px rgba(0,0,0,0.1);
        transform: translateY(-3px);
        transition: all 0.3s ease;
    }
    .rating-stars {
        color: #FFD700;
        font-size: 20px;
    }
    .header {
        color: #FF4B4B;
        font-weight: bold;
    }
    .sidebar .sidebar-content {
        background-color: #f8f9fa;
    }
    .stButton>button {
        background-color: #FF4B4B;
        color: white;
        border-radius: 8px;
        padding: 10px 20px;
    }
    .stButton>button:hover {
        background-color: #e04343;
    }
</style>
""", unsafe_allow_html=True)

# === ƒê∆∞·ªùng d·∫´n d·ªØ li·ªáu ===
DATA_PATH = Path(r"D:\Project_20\data\output\RS_save")
MOVIES_FILE = DATA_PATH / "movies_processed.csv"
RATINGS_FILE = DATA_PATH / "ratings_processed.csv"
RECOMMENDATIONS_FILE = DATA_PATH / "recommendations_all_users_msd_k10.pkl"

# === T·∫£i d·ªØ li·ªáu v√† g·ª£i √Ω ===
@st.cache_resource
def load_data_and_recommendations():
    try:
        movies = pd.read_csv(MOVIES_FILE)
        ratings = pd.read_csv(RATINGS_FILE)
        with open(RECOMMENDATIONS_FILE, 'rb') as f:
            all_recommendations = pickle.load(f)
        return movies, ratings, all_recommendations
    except Exception as e:
        st.error(f"Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu ho·∫∑c g·ª£i √Ω: {str(e)}")
        return None, None, None

movies, ratings, all_recommendations = load_data_and_recommendations()

# === H√†m l·∫•y g·ª£i √Ω user ===
def get_recommendations(user_id, all_recommendations, n_recommendations=10):
    recommendations = all_recommendations.get(user_id)
    if not recommendations:
        return None, f"Kh√¥ng t√¨m th·∫•y g·ª£i √Ω cho User {user_id}."
    recommendations = recommendations[:n_recommendations]
    formatted = [(raw_iid, movie_title, pred_rating) for raw_iid, movie_title, pred_rating in recommendations]
    return formatted, None

# === Giao di·ªán Streamlit ===
st.title("H·ªá Th·ªëng ƒê·ªÅ Xu·∫•t Phim")
st.markdown("### S·ª≠ d·ª•ng thu·∫≠t to√°n KNN (Collaborative Filtering)")

if movies is not None and ratings is not None and all_recommendations is not None:
    # Sidebar
    st.sidebar.header("C√†i ƒê·∫∑t ƒê·ªÅ Xu·∫•t")
    user_ids = sorted(ratings['user_id'].unique())
    selected_user = st.sidebar.selectbox("Ch·ªçn User ID:", user_ids, index=0)
    n_recommendations = 10
    st.sidebar.info(f"S·ªë l∆∞·ª£ng phim ƒë·ªÅ xu·∫•t: **{n_recommendations}**")
    st.sidebar.markdown("---")
    st.sidebar.subheader("Th√¥ng Tin User")
    user_ratings = ratings[ratings['user_id'] == selected_user]
    st.sidebar.metric("S·ªë phim ƒë√£ xem", len(user_ratings))
    st.sidebar.metric("Rating trung b√¨nh", f"{user_ratings['rating'].mean():.2f}")

    # Tabs
    tab1, tab2, tab3 = st.tabs(["ƒê·ªÅ Xu·∫•t Phim", "Th·ªëng K√™", "Gi·ªõi Thi·ªáu"])

    # === Tab 1: ƒê·ªÅ Xu·∫•t Phim ===
    with tab1:
        st.header("ƒê·ªÅ Xu·∫•t Phim C√° Nh√¢n H√≥a")
        if st.button("T·∫°o ƒê·ªÅ Xu·∫•t Ngay", type="primary"):
            with st.spinner("ƒêang t·∫£i g·ª£i √Ω..."):
                recommendations, error = get_recommendations(selected_user, all_recommendations, n_recommendations)
                if error:
                    st.error(error)
                else:
                    st.success("ƒê·ªÅ xu·∫•t th√†nh c√¥ng!")
                    st.subheader(f"Top {n_recommendations} phim ƒë·ªÅ xu·∫•t cho User {selected_user}")

                    # Hi·ªÉn th·ªã 2 h√†ng √ó 5 phim
                    for row in [recommendations[i:i+5] for i in range(0, len(recommendations), 5)]:
                        cols = st.columns(5)
                        for i, (movie_id, movie_title, pred_rating) in enumerate(row):
                            with cols[i]:
                                stars = int(round(pred_rating))
                                st.markdown(f"""
                                <div class="recommendation-card">
                                    <h4>{movie_title}</h4>
                                    <p><strong>Rating d·ª± ƒëo√°n:</strong> 
                                    <span class="rating-stars">{stars}</span> ({pred_rating:.1f}/5.0)</p>
                                    <p><strong>Movie ID:</strong> {movie_id}</p>
                                </div>
                                """, unsafe_allow_html=True)

    # === Tab 2: Th·ªëng K√™ ===
    with tab2:
        st.header("Th·ªëng K√™ H·ªá Th·ªëng")
        col1, col2, col3 = st.columns(3)
        col1.metric("T·ªïng s·ªë Users", len(ratings['user_id'].unique()))
        col2.metric("T·ªïng s·ªë Phim", len(movies))
        col3.metric("T·ªïng s·ªë Ratings", len(ratings))
        if st.checkbox("Hi·ªÉn th·ªã l·ªãch s·ª≠ xem"):
            st.subheader(f"L·ªãch s·ª≠ xem c·ªßa User {selected_user}")
            user_history = user_ratings.merge(movies, on='movie_id')
            history_display = user_history[['title', 'rating']].copy()
            history_display.columns = ['T√™n phim', 'Rating']
            history_display.index = range(1, len(history_display) + 1)
            st.dataframe(history_display, use_container_width=True)

    # === Tab 3: Gi·ªõi Thi·ªáu ===
    with tab3:
        st.header("Gi·ªõi Thi·ªáu H·ªá Th·ªëng")
        st.markdown("""
        ### H·ªá Th·ªëng ƒê·ªÅ Xu·∫•t Phim
        - **Thu·∫≠t to√°n:** KNN (Collaborative Filtering, Item-based, MSD, k=10)
        - **Dataset:** MovieLens 100K
        - **Hi·ªÉn th·ªã:** Ch·ªâ t√™n phim, rating d·ª± ƒëo√°n v√† Movie ID
        """)

else:
    st.error("""
    **Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu ho·∫∑c g·ª£i √Ω!**
    Vui l√≤ng ki·ªÉm tra c√°c file trong th∆∞ m·ª•c:
    - movies_processed.csv
    - ratings_processed.csv
    - recommendations_all_users_msd_k10.pkl
    """)

# Footer
st.markdown("---")
st.markdown("""
<div style='text-align: center; color: #666;'>
    <p><strong>H·ªá th·ªëng ƒë·ªÅ xu·∫•t phim</strong> - Collaborative Filtering KNN</p>
    <p>Dataset: MovieLens 100K | Algorithm: KNN (MSD, k=10)</p>
    <p>Built with Streamlit | Python | Machine Learning</p>
</div>
""", unsafe_allow_html=True)
